---
swagger: "2.0"
info:
  x-ibm-name: "catalog"
  title: "Catalog"
  version: "1.1.9-RC"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/catalog/r1/v1"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientSecretHeader:
    type: "apiKey"
    description: ""
    in: "header"
    name: "X-IBM-Client-Secret"
  MobileFirst OAuth Security Definition:
    type: "oauth2"
    description: ""
    flow: "implicit"
    authorizationUrl: "https://api.us.apiconnect.ibmcloud.com/supermercados-cencosud-my-space-mobile-latam/cencosud/mfp/oauth2/authorize"
    scopes:
      customer: "Provides access to the wong customer scope"
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
  clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - set-variable:
        title: "set-api-variables"
        actions:
        - set: "api_version"
          value: "v1"
        - set: "api_region"
          value: "r1"
        description: "Variables for API versioning and location"
    - set-variable:
        title: "set-base-url"
        actions:
        - set: "base_url"
          value: "wongqa.vtexcommercestable.com.br"
    - set-variable:
        title: "set-credentials"
        actions:
        - value: "cencoappuser"
          add: "http_user"
        - value: "HjztW7dQL7Y8XJ5cZbpfgMHb"
          add: "http_pass"
        version: "1.0.0"
    - gatewayscript:
        title: "setting_credentials"
        source: "apim.setvariable('message.headers.x-dp-cache-key','clear');\n\napim.setvariable('message.headers.x-vtex-api-appKey','g.granados@globant.com',\
          \ 'add');\napim.setvariable('message.headers.x-vtex-api-appToken','Hombrehojalata_2',\
          \ 'add');"
    - operation-switch:
        title: "operation-switch"
        case:
        - operations:
          - verb: "get"
            path: "/products/search"
          execute:
          - switch:
              title: "input-validation-switch"
              case:
              - condition: "$(request.parameters.offset) < 0 || $(request.parameters.limit)\
                  \ < 0 || $(request.parameters.offset)===\"-0\" || $(request.parameters.limit)===\"\
                  -0\" ||\n$(request.parameters.offset).match(/\\D/)  ||\n$(request.parameters.limit).match(/\\\
                  D/)"
                execute:
                - throw:
                    title: "throw"
                    name: "Invalid Parameter"
                    message: "Invalid parameter"
              - condition: "$(request.parameters.limit)> 50"
                execute:
                - throw:
                    title: "throw"
                    name: "Invalid Parameter"
                    message: "Invalid parameter"
              - condition: "$(request.parameters.o) && !($(request.parameters.o) in\
                  \ {'OrderByPriceASC':'','OrderByPriceDESC':'','OrderByTopSaleDESC':'','OrderByReviewRateDESC':'','OrderByNameASC':'','OrderByNameDESC':'','OrderByReleaseDateDESC':'','OrderByBestDiscountDESC':'',\n\
                  'OrderByPriceAsc':'','OrderByPriceDesc':'','OrderByTopSaleDesc':'','OrderByReviewRateDesc':'','OrderByNameAsc':'','OrderByNameDesc':'','OrderByReleaseDateDesc':'','OrderByBestDiscountDesc':''})"
                execute:
                - throw:
                    title: "throw"
                    name: "Invalid Parameter"
                    message: "Invalid parameter"
              - condition: "$(request.parameters.q).match(/[\\'\\\"?]/g)"
                execute:
                - throw:
                    title: "throw"
                    name: "Invalid Parameter"
                    message: "Invalid parameter"
          - invoke:
              target-url: "https://cencouat-catalog-service.mybluemix.net/search?filter=$(request.parameters.filter)&q=$(request.parameters.q)&o=$(request.parameters.o)&offset=$(request.parameters.offset)&limit=$(request.parameters.limit)&spec=$(request.parameters.spec)&brand=$(request.parameters.brand)"
              verb: "GET"
              title: "invoke-products-search"
              username: "$(http_user)"
              password: "$(http_pass)"
              description: "Invoke service"
          - if:
              title: "if_response_not _ok"
              condition: "$(message.status.code) !== 200 && $(message.status.code)\
                \ !== 206"
              execute:
              - gatewayscript:
                  title: "throw_response_script"
                  source: "\napim.error('MyError', $(message.status.code), '$(message.status.reason)',\
                    \ '$(message.body.error.message)');"
          - map:
              title: "map"
              inputs: {}
              outputs:
                output:
                  schema:
                    $ref: "#/definitions/productsResponse"
                  variable: "message.body"
              actions:
              - set: "output.products"
                default: "$(message.body.products)"
              - set: "output.metadata.region"
                default: "$(api_region)"
              - set: "output.metadata.version"
                default: "$(api_version)"
              - set: "output.metadata.requestTime"
                default: "$(request.date)"
              - set: "output.metadata.results"
                default: "$(message.body.info.totalResult)"
              version: "1.0.0"
        - operations:
          - verb: "get"
            path: "/product/{productId}"
          execute:
          - switch:
              title: "input_validation_switch"
              case:
              - condition: "!/^\\d+$/.test($(request.parameters.productId))"
                execute:
                - throw:
                    title: "throw"
                    name: "Invalid Parameter"
                    message: "Invalid parameter"
          - invoke:
              title: "invoke-productById"
              timeout: 60
              verb: "GET"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error: []
              target-url: "http://$(base_url)/api/catalog_system/pub/products/search?fq=productId:$(request.parameters.productId)"
              output: "ivk-product"
          - if:
              title: "empty_response_if"
              condition: "$(ivk-product.body.length)===0"
              execute:
              - throw:
                  title: "throw"
                  name: "Not Found"
                  message: "Resource  not found"
          - if:
              title: "if_response_not _ok"
              condition: "$(ivk-product.status.code) !== 200 && $(ivk-product.status.code)\
                \ !== 206"
              execute:
              - gatewayscript:
                  title: "throw_response_script"
                  source: "\napim.error('MyError', $(ivk-product.status.code), '$(ivk-product.status.reason)',\
                    \ '$(ivk-product.body.error.message)');"
          - invoke:
              title: "invoke-catalogProduct"
              timeout: 60
              verb: "GET"
              cache-response: "protocol"
              cache-ttl: 900
              target-url: "http://$(base_url)/api/catalog_system/pvt/products/ProductGet/$(request.parameters.productId)"
              output: "ivk-catalogProduct"
              stop-on-error: []
          - if:
              title: "if_response_not _ok"
              condition: "$(ivk-catalogProduct.status.code) !== 200 && $(ivk-catalogProduct.status.code)\
                \ !== 206"
              execute:
              - gatewayscript:
                  title: "throw_response_script"
                  source: "\napim.error('MyError', $(ivk-catalogProduct.status.code),\
                    \ '$(ivk-catalogProduct.status.reason)', '$(ivk-catalogProduct.body.error.message)');"
          - gatewayscript:
              title: "output_processing_script"
              source: "var body = apim.getvariable('ivk-product.body');\n\nif(body[0]){\n\
                \    //Parse description\n    var desc = body[0].description;\n  \
                \  var descCln = [];\n    if(desc && desc.length>0){\n        desc\
                \ = desc\n                .replace(/&#45; /g, '')\n              \
                \  .replace(/&#8211; /g, '')\n                .replace('\\\"', '')\n\
                \                .split(/\\\\r\\\\n/);\n        \n        for(var\
                \ i=0; i<desc.length; i++){\n            if(!desc[i].match(/(<([^>]+)>)/ig)){\n\
                \                descCln.push(desc[i]);    \n            }\n     \
                \   }\n        body[0].description = descCln;\n    }else{\n      \
                \  body[0].description = [body[0].description]\n    }\n\n    //Parse\
                \ specifications\n    var specifications = [];\n    var jsonStr;\n\
                \    \n    if(body[0].allSpecifications){\n        for(var i=0; i<body[0].allSpecifications.length;\
                \ i++){\n            \n            var spec = { \n               \
                \ key : '',\n                val : ''\n            };\n          \
                \  \n            spec.key = body[0].allSpecifications[i];\n      \
                \      spec.val = body[0][body[0].allSpecifications[i]].join(',');\n\
                \n            \n            if(body[0].allSpecifications[i] != 'Info\
                \ General' &&\n                body[0].allSpecifications[i] !== 'Descripci\\\
                u00F3n'){\n                specifications.push(spec);\n          \
                \  }\n        }\n    }\n    apim.setvariable('specifications',specifications,\
                \ 'set');\n\n    apim.setvariable('ivk-product.body',body[0], 'set');\n\
                }else{\n    apim.setvariable('ivk-product.body','{}', 'set');\n}\n"
          - map:
              title: "map"
              inputs:
                input:
                  schema:
                    $ref: "#/definitions/product-vtex"
                  variable: "ivk-product.body"
              outputs:
                output:
                  schema:
                    $ref: "#/definitions/productResponse"
                  variable: "message.body"
              actions:
              - set: "output.product.productName"
                from: "input.productName"
              - set: "output.product.productId"
                from: "input.productId"
              - set: "output.product.description"
                from: "input.description"
              - set: "output.product.productReference"
                from: "input.productReference"
              - set: "output.metadata.requestTime"
                default: "$(request.date)"
              - set: "output.metadata.region"
                default: "$(api_region)"
              - set: "output.metadata.version"
                default: "$(api_version)"
              - create: "output.product.items"
                foreach: "input.items"
                from: "input.items"
                actions:
                - create: "sellers"
                  foreach: "sellers"
                  from: "sellers"
                  actions:
                  - set: "commertialOffer.price"
                    from: "commertialOffer.Price"
                  - set: "commertialOffer.listPrice"
                    from: "commertialOffer.ListPrice"
                  - set: "addToCartLink"
                    from: "addToCartLink"
                  - set: "commertialOffer.discountRate"
                    from:
                    - "commertialOffer.Price"
                    - "commertialOffer.ListPrice"
                    value: "Math.floor(100-($(commertialOffer.Price)*100/$(commertialOffer.ListPrice)))"
                  - set: "commertialOffer.availableQuantity"
                    from: "commertialOffer.AvailableQuantity"
                  - set: "commertialOffer.available"
                    from: "commertialOffer.AvailableQuantity"
                    value: "$(commertialOffer.AvailableQuantity)>0"
                - set: "itemId"
                  from: "itemId"
                - create: "images"
                  foreach: "images"
                  from: "images"
                  actions:
                  - set: "imageUrl"
                    from: "imageUrl"
              - set: "output.product.specifications"
                default: "$(specifications)"
              - set: "output.product.generalInfo"
                from: "input.Info General"
              - set: "output.product.brand"
                from: "input.brand"
              - set: "output.product.categoryId"
                default: "$(ivk-catalogProduct.body.CategoryId)"
        otherwise: []
    catch:
    - errors:
      - "Not Found"
      execute:
      - set-variable:
          title: "HTTP_Not_Found"
          actions:
          - set: "message.body"
            value: "{ \\\"httpCode\\\":\\\"404\\\", \\\"httpMessage\\\":\"Not Found\"\
              , \\\"moreInformation\\\":\\\"Resource not found\\\" }"
          - set: "message.status.code"
            value: "404"
          - set: "message.headers.content-type"
            value: "application/json"
    - errors:
      - "Invalid Parameter"
      execute:
      - set-variable:
          title: "HTTP_Bad_Request"
          actions:
          - set: "message.body"
            value: "{ \\\"httpCode\\\":\\\"400\\\", \\\"httpMessage\\\":\"Bad Request\"\
              , \\\"moreInformation\\\":\\\"Invalid parameter\\\" }"
          - set: "message.status.code"
            value: "400"
          - set: "message.headers.content-type"
            value: "application/json"
  phase: "realized"
paths:
  /product/{productId}:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/products-vtex"
    parameters:
    - name: "productId"
      type: "string"
      required: true
      in: "path"
      description: "Product identification"
  /products/search:
    get:
      responses:
        200:
          description: "Products"
          schema:
            $ref: "#/definitions/searchResponse"
      security:
      - clientSecretHeader: []
        clientIdHeader: []
      parameters:
      - name: "q"
        type: "string"
        required: false
        in: "query"
        description: "Criteria for product search"
      - name: "o"
        type: "string"
        required: false
        in: "query"
        description: "Criteria to order by OrderByPriceASC, OrderByPriceDESC,OrderByTopSaleDESC,\
          \ OrderByReviewRateDESC, OrderByNameASC, OrderByNameDESC, OrderByReleaseDateDESC,\
          \ OrderByBestDiscountDESC"
      - name: "offset"
        type: "integer"
        required: false
        in: "query"
        description: "Index start for paging"
        format: "int32"
      - name: "limit"
        type: "integer"
        required: false
        in: "query"
        description: "Number of elements"
        format: "int32"
      - name: "filter"
        type: "string"
        required: false
        in: "query"
        description: "Category filter"
      - name: "spec"
        type: "array"
        required: false
        in: "query"
        description: "Specifications filter"
        items:
          type: "string"
      - name: "brand"
        type: "string"
        required: false
        in: "query"
        description: "Brand name"
definitions:
  productsResponse:
    properties:
      metadata:
        description: "API request metadata"
        $ref: "#/definitions/metadata"
      products:
        description: "Products array"
        type: "object"
    additionalProperties: false
  products:
    description: "Products"
    type: "array"
    items:
      $ref: "#/definitions/product"
  product:
    properties:
      brand:
        type: "string"
      categoryId:
        type: "string"
      generalInfo:
        type: "string"
        description: "General info"
      specifications:
        type: "array"
        description: "Specifications"
        items:
          type: "string"
      description:
        type: "string"
        description: "Product Description"
        example: "Panel LED de 48” 1920 x 1080"
      productReference:
        type: "string"
        example: "471979"
        description: "Product Reference"
      productId:
        type: "string"
        description: "Product Identification"
        example: "2001081"
      productName:
        type: "string"
        description: "Product Name"
        example: "Samsung Televisor LED Full HD Smart 48 UN48H5500AG"
      items:
        description: "Items"
        type: "array"
        items:
          $ref: "#/definitions/item"
    additionalProperties: false
    description: "Product"
  item:
    properties:
      images:
        type: "array"
        description: "Images"
        items:
          $ref: "#/definitions/image"
      itemId:
        type: "string"
        description: "Item Identification"
        example: "2001097"
      sellers:
        description: "Sellers"
        type: "array"
        items:
          $ref: "#/definitions/seller"
    additionalProperties: false
    description: "Product Item"
  seller:
    properties:
      addToCartLink:
        type: "string"
        description: "Add to cart link"
        example: "https://wongqa.vtexcommercestable.com.br/checkout/cart/add?sku=2000371&qty=1&seller=1&sc=1&price=19900&cv=900ab47aa9c6909beabc5b55ce8f1b06_geral:6526CBEB824751E6BAC7DCB9FEF12394&sc=1"
      commertialOffer:
        description: "Commertial Offer"
        $ref: "#/definitions/commertialOffer"
    additionalProperties: false
    description: "Seller"
  commertialOffer:
    properties:
      available:
        type: "boolean"
        description: "Available ins stock flag"
        example: true
      availableQuantity:
        type: "number"
        description: "Available quantity in stock"
        format: "double"
        example: 10000
      price:
        type: "string"
        description: "Product price"
        example: "800"
      listPrice:
        type: "string"
        description: "Product List Price"
        example: "1000"
      discountRate:
        type: "string"
        description: "Discount Rate"
        example: "20"
    additionalProperties: false
    description: "Commercial Offer"
  image:
    properties:
      imageUrl:
        type: "string"
        description: "Product Image URL"
        example: "http://wongqa.vteximg.com.br/arquivos/ids/156721/Televisor-Samsung-LED-FHD-Smart-48-pulgadas-UN48H5500AG-wong-471979.jpg"
    additionalProperties: false
    description: "Product Image"
  productResponse:
    properties:
      product:
        $ref: "#/definitions/product"
      metadata:
        description: "Response metadata"
        $ref: "#/definitions/metadata"
    additionalProperties: false
  metadata:
    properties:
      results:
        type: "string"
        description: "Total Items"
        example: "10"
      requestTime:
        type: "string"
        description: "Api Request Time"
        example: "Thu, 24 Nov 2016 15:17:32 Z"
      region:
        type: "string"
        description: "API Region"
        example: "r1"
      version:
        type: "string"
        description: "API Version"
        example: "v1"
    additionalProperties: false
  searchResponse:
    properties:
      metadata:
        $ref: "#/definitions/metadata"
        description: "Response metadata"
      products:
        $ref: "#/definitions/products"
        description: "Product list"
    additionalProperties: false
    description: "API Search response"
  products-vtex:
    type: "array"
    items:
      $ref: "#/definitions/product-vtex"
    description: "VTEX response products array"
  product-vtex:
    description: "Product definition"
    type: "object"
    properties:
      brand:
        type: "string"
        description: "Brand"
      allSpecifiactions:
        type: "array"
        description: "Specifications list"
        items:
          type: "string"
      productName:
        type: "string"
        description: "Product name"
        example: "camera"
      productId:
        type: "string"
        description: "Identification"
        example: "0001"
      description:
        type: "string"
        description: "Product Description"
        example: "Panel LED de 48” 1920 x 1080"
      Info General:
        type: "string"
        description: "General Info"
        example: "Vive la nueva era de ver televisión gracias a Samsung."
      productReference:
        type: "string"
        example: "471979"
        description: "Product Reference"
      items:
        description: "Items"
        type: "array"
        items:
          $ref: "#/definitions/item-vtex"
  item-vtex:
    description: "Item definition"
    type: "object"
    properties:
      itemId:
        type: "string"
        description: "Item Identification"
        example: "123123"
      sellers:
        type: "array"
        items:
          $ref: "#/definitions/seller-vtex"
        description: "Seller"
      images:
        description: "URLs for images"
        type: "array"
        items:
          $ref: "#/definitions/image-vtex"
    additionalProperties: false
  seller-vtex:
    description: "Seller definition"
    type: "object"
    properties:
      addToCartLink:
        type: "string"
        description: "Add to cart link"
        example: "https://wongqa.vtexcommercestable.com.br/checkout/cart/add?sku=2000371&qty=1&seller=1&sc=1&price=19900&cv=900ab47aa9c6909beabc5b55ce8f1b06_geral:6526CBEB824751E6BAC7DCB9FEF12394&sc=1"
      commertialOffer:
        $ref: "#/definitions/commertialOffer-vtex"
    additionalProperties: false
  commertialOffer-vtex:
    description: "Commercial offer"
    type: "object"
    properties:
      AvailableQuantity:
        type: "number"
        description: "Avaliable quantity"
        example: "10000"
        format: "double"
      discountRate:
        type: "string"
        description: "Discount rate"
        example: "20"
      Price:
        type: "string"
        description: "Price"
        example: 12.3
      ListPrice:
        type: "string"
        description: "List price"
        example: 24.34
    additionalProperties: false
  image-vtex:
    description: "Image definition"
    type: "object"
    properties:
      imageUrl:
        type: "string"
        description: "Image URL"
        example: "http://image"
    additionalProperties: false
tags: []
